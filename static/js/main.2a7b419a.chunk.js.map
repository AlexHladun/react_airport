{"version":3,"sources":["Components/FlightItem.jsx","Components/Switcher.jsx","Components/FlightList.jsx","App.js","serviceWorker.js","index.js"],"names":["FlightItem","props","data","timeDepShedule","concat","toString","slice","timeArrShedule","react_default","a","createElement","Fragment","className","term","gate","gateNo","status","airline","en","name","codeShareData","codeShare","href","Switcher","type","display","onClick","switchFlightList","width","height","viewBox","version","xmlns","id","transform","fill","d","FlightList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","departure","arrival","bind","assertThisInitialized","_this2","date","Date","toISOString","split","fetch","then","json","_ref","body","setState","displayMode","_this3","map","item","key","ID","Component","App","FlightList_FlightList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a7b419a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default function FlightItem(props){\n  const data = props.data;\n  const timeDepShedule = `${data.timeDepShedule}`.toString().slice(11,16);\n  const timeArrShedule = `${data.timeArrShedule}`.toString().slice(11,16);\n    return (\n      <>\n        <tr className=\"flight-item\">\n          <td>\n            <span className={data.term === 'A' ? 'term-a' : 'term-d'}>{data.term}</span>\n          </td>\n          {props.gate ? <td>{data.gateNo}</td> : null}\n          {timeDepShedule &&\n            <td>\n              {timeDepShedule}\n            </td>}\n          {timeArrShedule &&\n            <td>\n              {timeArrShedule}\n            </td>}\n          {data[`airportToID.city_en`] && \n            <td>\n              {data[`airportToID.city_en`]}\n            </td>}\n          {data[\"airportFromID.name_en\"] && \n            <td>\n              {data[\"airportFromID.name_en\"]}\n            </td>}\n          <td>{data.status}</td>\n          <td>{data.airline.en.name}</td>\n          <td>{data.codeShareData[0].codeShare}</td>\n          <td><a href=\"#\">Flight details</a></td>\n        </tr>\n      </>\n    )\n}\n","import React from 'react';\n\nexport default function Switcher(props) {\n  return (\n    <div className=\"buttons\">\n      <button\n        type=\"button\"\n        className={props.display === 'departure' ? 'departures active' : 'departures'}\n        onClick={() => props.switchFlightList('departure')}\n      >\n        <svg width=\"40px\" height=\"28px\" viewBox=\"0 0 40 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g id=\"Path-403\" transform=\"translate(-1.000000, -1.000000)\" fill=\"#fff\">\n            <path\n              d=\"M40.9190312,14.2925525 C40.731055,13.5210761 40.2396434,12.8581323 39.5561585,12.4539552\n            C38.8726735,12.0497781 38.0549837,11.9385881 37.2883912,12.1455827 L26.8096581,15.0218819 L13.1945082,2\n            L9.38678826,3.03046545 L17.5564785,17.5510243 L7.75204986,20.2442408 L3.86129243,17.1278331 L1,17.9171897\n            L4.59162231,24.3200818 L6.11030829,27.0112974 L9.26373268,26.1409043 L19.7414654,23.2656055\n            L28.3253427,20.9165445 L38.8070772,18.0372439 C40.4055057,17.5625364 41.3397513,15.9060318\n            40.9190312,14.2925525 Z\"\n              transform=\"translate(21.009879, 14.505649) rotate(-4.012171)\n            translate(-21.009879, -14.505649)\"\n            />\n          </g>\n        </svg>\n        DEPARTURES\n      </button>\n      <button\n        type=\"button\"\n        className={props.display === 'arrival' ? 'arrivals active' : 'arrivals'}\n        onClick={() => props.switchFlightList('arrival')}\n      >\n        <svg width=\"40px\" height=\"28px\" viewBox=\"0 0 40 28\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"#fff\">\n            <g id=\"Group\" transform=\"translate(-4.000000, -7.000000)\">\n              <path\n                d=\"M43.8940167,20.2848496 C43.7061583,19.5138567 43.2150547,18.8513283 42.531998,18.4474045\n              C41.8489414,18.0434806 41.031764,17.9323603 40.2656518,18.1392252 L29.793485,21.013722 L16.1868667,8\n              L12.3815328,9.02981973 L20.5461037,23.5412796 L10.7478188,26.2328084 L6.85949946,23.1183536 L4,\n              23.9072155\n              L7.5893717,30.3060954 L9.10710602,32.9956246 L12.2585544,32.1257769 L22.7297214,29.2522799 L31.3082198,\n              26.9046908\n              L41.7833862,24.0271945 C43.3808131,23.5527844 44.3144732,21.8973179 43.8940167,20.2848496 Z\"\n                transform=\"translate(23.997341, 20.497812) rotate(27.974730)\n              translate(-23.997341, -20.497812) \"\n              />\n            </g>\n          </g>\n        </svg>\n        ARRIVAL\n      </button>\n    </div>\n  );\n}\n","import React, { Component } from 'react'\nimport FlightItem from './FlightItem.jsx'\nimport Switcher from \"./Switcher\";\n\nexport default class FlightList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departure: [],\n      arrival: [],\n      display: 'departure'\n    }\n    this.switchFlightList = this.switchFlightList.bind(this);\n  }\n\n  componentDidMount() {\n    const date = new Date().toISOString().split('T')[0];\n    fetch(`https://api.iev.aero/api/flights/${date}`)\n      .then(data => data.json())\n      .then(({ body }) => {\n        const { arrival, departure } = body;\n        this.setState(() => ({\n          arrival, departure\n        }))\n      });\n  }\n\n  switchFlightList(displayMode) {\n    this.setState({display: displayMode});\n  }\n\n  render() {\n    const data = this.state[this.state.display]\n    return (\n      <div>\n        <Switcher display={this.state.display} switchFlightList={this.switchFlightList}/>\n        <table className=\"table\">\n          <thead className=\"thead\">\n            <tr>\n              <th>Terminal</th>\n              {this.state.display === 'departure' &&\n              <th>Gate</th>\n              }\n              <th>Local time</th>\n              <th>Destination</th>\n              <th>Status</th>\n              <th>Airline</th>\n              <th>Flight</th>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody className=\"tbody\">\n            {data.map(item =><FlightItem key={item.ID} data={item} gate={this.state.display === 'departure'} />)}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport FlightList from './Components/FlightList.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FlightList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}